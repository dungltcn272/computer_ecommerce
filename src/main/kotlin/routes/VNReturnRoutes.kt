package com.ltcn272.routes

import com.ltcn272.services.OrderService
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import io.ktor.http.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.util.*

fun Route.vnPayReturnRoutes(orderService: OrderService, vnp_HashSecret: String) {
    get("/orders/vnpay_return") {
        val params = call.request.queryParameters.toMap().toMutableMap()
        val secureHash = params.remove("vnp_SecureHash")?.firstOrNull() // L·∫•y v√† x√≥a hash ƒë·ªÉ ki·ªÉm tra

        if (secureHash.isNullOrBlank()) {
            call.respond(HttpStatusCode.BadRequest, "Missing vnp_SecureHash")
            return@get
        }

        // üîπ B∆∞·ªõc 1: S·∫Øp x·∫øp tham s·ªë theo th·ª© t·ª± a-z (lo·∫°i b·ªè tham s·ªë hash)
        val sortedParams = params.entries
            .sortedBy { it.key }
            .joinToString("&") { "${it.key}=${it.value.first()}" }

        // üîπ B∆∞·ªõc 2: T·∫°o ch·ªØ k√Ω HMAC-SHA512
        val computedHash = hmacSHA512(vnp_HashSecret, sortedParams)

        // üîπ B∆∞·ªõc 3: Ki·ªÉm tra ch·ªØ k√Ω
        if (!secureHash.equals(computedHash, ignoreCase = true)) {
            call.respond(HttpStatusCode.BadRequest, "Invalid signature")
            return@get
        }

        // üîπ B∆∞·ªõc 4: L·∫•y orderId v√† ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
        val orderId = params["vnp_TxnRef"]?.firstOrNull()
        val responseCode = params["vnp_ResponseCode"]?.firstOrNull()
        val transactionStatus = params["vnp_TransactionStatus"]?.firstOrNull()

        if (orderId.isNullOrBlank()) {
            call.respond(HttpStatusCode.BadRequest, "Invalid order ID")
            return@get
        }

        // Ki·ªÉm tra m√£ ph·∫£n h·ªìi v√† tr·∫°ng th√°i giao d·ªãch
        val paymentStatus = if (responseCode == "00" && transactionStatus == "00") "PAID" else "FAILED"

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        orderService.updatePaymentStatus(orderId.toLong(), paymentStatus)

        // Tr·∫£ k·∫øt qu·∫£
        call.respond(HttpStatusCode.OK, mapOf("orderId" to orderId, "status" to paymentStatus))
    }
}

// üîπ H√†m t·∫°o HMAC-SHA512
fun hmacSHA512(secret: String, data: String): String {
    val hmac = Mac.getInstance("HmacSHA512")
    val secretKey = SecretKeySpec(secret.toByteArray(Charsets.UTF_8), "HmacSHA512")
    hmac.init(secretKey)
    return hmac.doFinal(data.toByteArray(Charsets.UTF_8)).joinToString("") { "%02x".format(it) }
}